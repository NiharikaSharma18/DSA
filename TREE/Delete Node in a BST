 TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL)
        {
            return NULL;
        }
        if(root->val==key){
            return helper(root);
        }
        TreeNode *d=root;
while(root!=nullptr){
    if(root->val>key){
        if(root->left!=NULL && root->left->val==key)
        {
            root->left=helper(root->left);
            break;
        }
        else
        {
            root=root->left;
        }}
        else{
        if(root->right!=NULL && root->right->val==key)
        {
            root->right=helper(root->right);
            break;
        }
        else
        {
            root=root->right;
        }
    }
}
return d;

    }
    TreeNode* helper(TreeNode* root){
        if(root->left==NULL)
        return root->right;
        else if(root->right==NULL)
        return root->left;
        TreeNode* rc=root->right;
        TreeNode* l=fr(root->left);
        l->right=rc;
        return root->left;}
        TreeNode* fr(TreeNode* root){
            if(root->right==nullptr)
            return root;
            return fr(root->right);

        }
    
};
