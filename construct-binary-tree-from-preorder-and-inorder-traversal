class Solution {
public:
TreeNode* tree_build(vector<int> &preorder,vector<int> &inorder,int preorderstart,int preorderend,int inorderstart, int inorderend){
    if(inorderstart>inorderend){
        return NULL;
    }
    int rootval=preorder[preorderstart];
    int rootindex=-1;
    for(int i= inorderstart;i<=inorderend;i++){
        if(rootval==inorder[i])
        {rootindex=i;
        break;
    }}
    TreeNode *root=new TreeNode(rootval);
    int lins=inorderstart;
    int line=rootindex-1;
    int rins=rootindex+1;
    int rine=inorderend;
    int lprs=preorderstart+1;
    int lpre=line-lins+lprs;
    int rprs=lpre+1;
    int rpre=preorderend;
root->left=tree_build(preorder,inorder,lprs,lpre,lins,line);
root->right=tree_build(preorder,inorder,rprs,rpre,rins,rine);
return root;
}





    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
    int preorderstart=0;
    int preorderend=preorder.size()-1;
    int inorderstart=0;
    int inorderend=inorder.size()-1;
    return tree_build(preorder,inorder,preorderstart,preorderend,inorderstart,inorderend)    ;
    }
};
