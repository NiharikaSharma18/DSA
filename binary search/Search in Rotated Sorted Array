class Solution {
public:
    int search(vector<int>& nums, int target) {
       int n=nums.size();
       if(n==1)
       {
           if(nums[0]==target)
           return 0;
           else
           return -1;
       }
       if(n==2){
           if(nums[0]==target)
           return 0;
           else if(nums[1]==target)
           return 1;
           else
           return -1;
       }
       
        int s=0,end=n-1;
        int min=0,k=0;
        while(s<=end){
            int mid = s + (end - s) / 2;
            int next=(mid+1)%n;
            int prev=(mid+n-1)%n;
            if(nums[mid]<=nums[next] && nums[mid]<=nums[prev] )
            {
                min=nums[mid];
                k=mid;
                break;
            }
            else if(nums[end]<nums[mid])
            {
                s=mid+1;
            }
            else 
            end=mid-1;

        }
        if(min==target)
        {
            return k;
        }
        int l=ele(nums,target,k+1,n-1);
        int m=ele(nums,target,0,k-1);
        if(l!=-1)
        return l;
        else if(m!=-1)
        return m;
       else
      return -1;
    }
    int ele(vector<int>& nums,int target,int s,int end){
      
        while(s<=end){
             int mid = s + (end - s) / 2;
          
            if(nums[mid]==target)
            {
                return mid;
            }
            else if(nums[mid]<target)
            {
                s=mid+1;
            }
            else if(nums[mid]>target)
            end=mid-1;

        }  
        return -1;
    }
};
